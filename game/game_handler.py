import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
import random
import logging
import os
from telegram import InputFile, Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

from handlers.checkin_handler import load_user_points, save_user_points

game_state = {}

async def user_has_interacted_before(user_id, bot):
    try:
        chat_member = await bot.get_chat_member(chat_id=user_id, user_id=user_id)
        return chat_member.status != "left"
    except:
        return False
    
async def start_ontuti(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t∆∞∆°ng t√°c v·ªõi bot ch∆∞a
    if not await user_has_interacted_before(user.id, context.bot):
        await context.bot.send_message(chat_id=user.id, text="Vui l√≤ng nh·∫Øn tin b·∫•t k·ª≥ cho bot tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu tr√≤ ch∆°i.")
        return
    
    logger.debug(f"Attempting to start O·∫≥n T√π T√¨ game in chat {chat_id}")

    if chat_id in game_state and game_state[chat_id].get("game_started", False):
        if user.id in [p.id for p in game_state[chat_id]["players"]]:
            await update.message.reply_text("B·∫°n ƒë√£ tham gia tr·∫≠n chi·∫øn r·ªìi, vui l√≤ng ƒë·ª£i ƒë·ªëi th·ªß tham gia.")
        else:
            await update.message.reply_text("ƒê√£ c√≥ m·ªôt ng∆∞·ªùi tham gia r·ªìi, m·ªùi b·∫°n b·∫•m /joinontuti ƒë·ªÉ tham gia.")
        return

    logger.debug(f"Starting O·∫≥n T√π T√¨ game in chat {chat_id}")
    game_state[chat_id] = {
        "game_started": True,
        "players": [user],
        "choices": {},
        "messages": []
    }

    # G·ª≠i th√¥ng b√°o chung v√†o group
    announcement = await update.message.reply_text(
        "L√†m t√≠ O·∫≥n T√π T√¨ ai thua m·ªùi n∆∞·ªõc c·∫£ t·ªï nh√© anh em!\n/joinontuti"
    )
    game_state[chat_id]["messages"].append(announcement.message_id)

    image_path = os.path.join(os.path.dirname(__file__), 'solo.jpg')
    
    if os.path.exists(image_path):
        caption = f"S√¢n ch∆°i ƒë√£ c√≥ 1 ng∆∞·ªùi tham gia:\n<b>{user.full_name}</b>\nvs\n......."
        with open(image_path, 'rb') as photo:
            message = await context.bot.send_photo(
                chat_id=chat_id,
                photo=InputFile(photo),
                caption=caption,
                parse_mode='HTML'
            )
    else:
        logger.error(f"Image file not found: {image_path}")
        message = await update.message.reply_html(
            f"S√¢n ch∆°i ƒë√£ c√≥ 1 ng∆∞·ªùi tham gia:\n\n<b>{user.full_name}</b>\nvs\n......."
        )
    
    game_state[chat_id]["messages"].append(message.message_id)

    # ƒê·∫∑t timer 60 gi√¢y ƒë·ªÉ h·ªßy game n·∫øu kh√¥ng ƒë·ªß ng∆∞·ªùi ch∆°i
    context.job_queue.run_once(cancel_game_timeout, 60, chat_id=chat_id, name=f'cancel_game_{chat_id}')

async def join_ontuti(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t∆∞∆°ng t√°c v·ªõi bot ch∆∞a
    if not await user_has_interacted_before(user.id, context.bot):
        await context.bot.send_message(chat_id=user.id, text="Vui l√≤ng nh·∫Øn tin b·∫•t k·ª≥ cho bot tr∆∞·ªõc khi tham gia tr√≤ ch∆°i.")
        return
    
    logger.debug(f"User {user.id} trying to join game in chat {chat_id}")
    
    if chat_id not in game_state or not game_state[chat_id].get("game_started", False):
        await update.message.reply_text("Hi·ªán t·∫°i ch∆∞a c√≥ game n√†o ƒë∆∞·ª£c t·∫°o. H√£y s·ª≠ d·ª•ng l·ªánh /ontuti ƒë·ªÉ t·∫°o game m·ªõi.")
        return

    if user.id in [p.id for p in game_state[chat_id]["players"]]:
        await update.message.reply_text("B·∫°n ƒë√£ tham gia tr·∫≠n chi·∫øn r·ªìi, vui l√≤ng ƒë·ª£i ƒë·ªëi th·ªß tham gia.")
        return

    if len(game_state[chat_id]["players"]) >= 2:
        await update.message.reply_text("Kh√¥ng th·ªÉ tham gia game l√∫c n√†y. Game ƒë√£ ƒë·ªß ng∆∞·ªùi ch∆°i.")
        return

    game_state[chat_id]["players"].append(user)
    logger.debug(f"Game state after join: {game_state[chat_id]}")
    players = game_state[chat_id]["players"]

    # H·ªßy timer h·ªßy game v√¨ ƒë√£ ƒë·ªß ng∆∞·ªùi ch∆°i
    current_jobs = context.job_queue.get_jobs_by_name(f'cancel_game_{chat_id}')
    for job in current_jobs:
        job.schedule_removal()

    for message_id in game_state[chat_id].get("messages", []):
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            logger.error(f"Error deleting message: {e}")
    
    game_state[chat_id]["messages"] = []

    message = await update.message.reply_html(
        f"S√¢n ch∆°i ƒë√£ c√≥ 2 ng∆∞·ªùi tham gia:\n\n<b>{players[0].full_name}</b>\nvs\n<b>{players[1].full_name}</b>\n\nTr√≤ ch∆°i s·∫Ω b·∫Øt ƒë·∫ßu trong 5s n·ªØa"
    )
    game_state[chat_id]["messages"].append(message.message_id)
    await asyncio.sleep(5)
    await start_game(update, context)

async def cancel_game_timeout(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id

    if chat_id in game_state and len(game_state[chat_id]["players"]) < 2:
        await context.bot.send_message(
            chat_id=chat_id,
            text="Kh√¥ng ƒë·ªß 2 ng∆∞·ªùi ch∆°i, tr·∫≠n ƒë·∫•u kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu. Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i ƒë·ªÉ t√¨m ƒë·ªëi th·ªß!"
        )
        # X√≥a c√°c tin nh·∫Øn c≈©
        for message_id in game_state[chat_id].get("messages", []):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                logger.error(f"Error deleting message: {e}")
        
        # X√≥a tr·∫°ng th√°i game
        del game_state[chat_id]
        
async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    players = game_state[chat_id]["players"]
    logger.debug(f"Starting game for chat {chat_id} with players {[p.id for p in players]}")

    keyboard = [
        [
            InlineKeyboardButton("K√©o ‚úåÔ∏è", callback_data=f"choice:keo:{chat_id}"),
            InlineKeyboardButton("L√° üñêÔ∏è", callback_data=f"choice:la:{chat_id}"),
            InlineKeyboardButton("B√∫a üëä", callback_data=f"choice:bua:{chat_id}"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    for player in players:
        await context.bot.send_message(
            chat_id=player.id,
            text="M·ªùi b·∫°n ch·ªçn ph∆∞∆°ng th·ª©c k·∫øt li·ªÖu k·∫ª ƒë·ªãch.\n\nB·∫°n c√≥ 5 gi√¢y ƒë·ªÉ ch·ªçn",
            reply_markup=reply_markup
        )

    # ƒê·∫∑t timer ƒë·ªÉ k·∫øt th√∫c game sau 5 gi√¢y
    context.job_queue.run_once(end_game_callback, 5, chat_id=chat_id, name=f'end_game_{chat_id}')

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    data = query.data.split(':')
    if len(data) != 3 or data[0] != 'choice':
        logger.warning(f"Invalid callback data: {query.data}")
        return

    choice, chat_id = data[1], int(data[2])
    logger.debug(f"Handling choice '{choice}' from user {user.id} in chat {chat_id}")

    if chat_id not in game_state or user.id not in [p.id for p in game_state[chat_id]["players"]]:
        logger.warning(f"Invalid choice from user {user.id} in chat {chat_id}")
        return

    game_state[chat_id]["choices"][user.id] = choice
    await query.edit_message_text(f"B·∫°n ƒë√£ ch·ªçn: {format_choice(choice)}")

    logger.debug(f"Current game state: {game_state[chat_id]}")

    if len(game_state[chat_id]["choices"]) == 2:
        # H·ªßy timer n·∫øu c·∫£ hai ng∆∞·ªùi ch∆°i ƒë√£ ch·ªçn
        current_jobs = context.job_queue.get_jobs_by_name(f'end_game_{chat_id}')
        for job in current_jobs:
            job.schedule_removal()
        await end_game(update, context, chat_id)

async def end_game_callback(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    await end_game(None, context, job.chat_id)

def format_choice(choice):
    choice_map = {
        "keo": "K√©o ‚úåÔ∏è",
        "la": "L√° üñêÔ∏è",
        "bua": "B√∫a üëä"
    }
    return choice_map.get(choice, choice)

async def end_game(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    await asyncio.sleep(1)
    logger.debug(f"Ending game for chat {chat_id}")
    players = game_state[chat_id]["players"]
    choices = game_state[chat_id]["choices"]

    timeout_players = [p for p in players if p.id not in choices]
    if timeout_players:
        # C√≥ √≠t nh·∫•t m·ªôt ng∆∞·ªùi ch∆°i kh√¥ng ch·ªçn trong th·ªùi gian quy ƒë·ªãnh
        for player in timeout_players:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"Th√†nh vi√™n <b>{player.full_name}</b> ƒë√£ b·ªè ch·∫°y v√¨ qu√° s·ª£ h√£i",
                parse_mode='HTML'
            )
        del game_state[chat_id]
        return

    player1, player2 = players
    choice1, choice2 = choices[player1.id], choices[player2.id]

    winner = determine_winner(choice1, choice2)

    user_data = load_user_points()
    chat_id_str = str(chat_id)

    result = "Tr·∫≠n ƒë·∫•u ƒë√£ k·∫øt th√∫c\n\n"
    result += f"<b>{player1.full_name}</b> ch·ªçn {format_choice(choice1)}\n"
    result += f"<b>{player2.full_name}</b> ch·ªçn {format_choice(choice2)}\n\n"

    if winner == 0:
        result += "K·∫øt qu·∫£: H√≤a! Kh√¥ng ai th·∫Øng c·∫£.\nL√†m l·∫°i v√°n n·ªØa cho nguy nga nh√© /ontuti"
    elif winner == 1:
        result += f"Ch√∫c m·ª´ng b·∫°n <b>{player1.full_name}</b> ƒë√£ d√†nh chi·∫øn th·∫Øng."
        if chat_id_str in user_data and player1.username in user_data[chat_id_str]:
            user_data[chat_id_str][player1.username]["points"] += 50
    else:
        result += f"Ch√∫c m·ª´ng b·∫°n <b>{player2.full_name}</b> ƒë√£ d√†nh chi·∫øn th·∫Øng."
        if chat_id_str in user_data and player2.username in user_data[chat_id_str]:
            user_data[chat_id_str][player2.username]["points"] += 50

    save_user_points(user_data)

    await context.bot.send_message(chat_id=chat_id, text=result, parse_mode='HTML')
    del game_state[chat_id]
    
def determine_winner(choice1, choice2):
    if choice1 == choice2:
        return 0
    elif (choice1 == "keo" and choice2 == "la") or \
         (choice1 == "la" and choice2 == "bua") or \
         (choice1 == "bua" and choice2 == "keo"):
        return 1
    else:
        return 2

# H√†m ƒë·ªÉ ƒëƒÉng k√Ω c√°c handlers cho tr√≤ ch∆°i O·∫≥n T√π T√¨
def register_handlers(application):
    application.add_handler(CommandHandler("ontuti", start_ontuti))
    application.add_handler(CommandHandler("joinontuti", join_ontuti))
    application.add_handler(CallbackQueryHandler(handle_choice))